package testProgram;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import programSteps.*;

@SuppressWarnings("serial")
public class FileMenu extends JMenu {
	
	private File path = null;
	private static JFileChooser chooser = new JFileChooser();
	private static FileNameExtensionFilter filter = new FileNameExtensionFilter("Project Files", "prj");

	public FileMenu() {
		chooser.setFileFilter(filter);
		
		this.setText("File");

		JMenuItem save = new JMenuItem("Save");
		save.addActionListener(new FileMenuListener());
		this.add(save);

		JMenuItem saveAs = new JMenuItem("Save As...");
		saveAs.addActionListener(new FileMenuListener());
		this.add(saveAs);

		JMenuItem open = new JMenuItem("Open");
		open.addActionListener(new FileMenuListener());
		this.add(open);

		JMenuItem exit = new JMenuItem("Exit");
		exit.addActionListener(new FileMenuListener());
		this.add(exit);
	}

	private class FileMenuListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent arg0) {
			JMenuItem source = (JMenuItem) arg0.getSource();
			if(source.getText().equals("Save")) {
				if(path.exists())
					generateSaveFile(path);
				else {
					int returnVal = getSaveLocation();
					if(returnVal == 0)
						returnVal = generateSaveFile(path);
					else if(returnVal == 1)
						JOptionPane.showMessageDialog(getParent(), "Error saving file!", "File Save Error", JOptionPane.ERROR_MESSAGE);
				}
			}
			else if(source.getText().equals("Save As...")) {
				int returnVal = getSaveLocation();
				if(returnVal == 0)
					returnVal = generateSaveFile(path);
				else if(returnVal == 1)
					JOptionPane.showMessageDialog(getParent(), "Error saving file!", "File Save Error", JOptionPane.ERROR_MESSAGE);
			}
			else if(source.getText().equals("Open")) {
				File open = null;
				int returnVal = getOpenLocation(open);
				if(returnVal == 0)
					openSelectedFile(open);
				else if(returnVal == 1)
					JOptionPane.showMessageDialog(getParent(), "Error opening file!", "File Open Error", JOptionPane.ERROR_MESSAGE);
			}
			if (source.getText().equals("Exit"))
				((JFrame) ((JRootPane) ((JLayeredPane) ((JMenuBar) ((FileMenu) ((JPopupMenu) source.getParent()).getInvoker()).getParent()).getParent()).getParent()).getParent()).dispose();
		}
	}
	
	public int generateSaveFile(File path) {
		return 0;
	}
	
	public int getSaveLocation() {
		int returnVal = chooser.showSaveDialog(getParent());
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			path = chooser.getSelectedFile();
			if(path.exists()) {
				returnVal = JOptionPane.showConfirmDialog(getParent(), "Selected file already exists, is it okay to overwrite?", "Confirm Overwrite", JOptionPane.YES_NO_OPTION);
				if(returnVal == JOptionPane.YES_OPTION)
					return 0;
				else
					return getSaveLocation();
			}
			else
				return 0;
		}
		else if(returnVal == JFileChooser.CANCEL_OPTION)
			return -1;
		return 1;
	}
	
	public int getOpenLocation(File open) {
		int returnVal = chooser.showOpenDialog(getParent());
		if(returnVal == JFileChooser.APPROVE_OPTION) {
			open = chooser.getSelectedFile();
			return 0;
		}
		else if(returnVal == JFileChooser.CANCEL_OPTION)
			return -1;
		return 1;
	}
	
	public void openSelectedFile(File open)
	{
		String line = "";
		try {
			FileReader input = new FileReader(open);
			line = readLine(input);
			if(!line.contains("<Generated By>") || !line.contains("</Generated By>") || !line.contains("ATE Simulator")) {
				JOptionPane.showMessageDialog(getParent(), "Error opening file.  The selected file is not an ATE Simulator project file.", "File Open Error", JOptionPane.ERROR_MESSAGE);
				return;
			}
			path = open;
			line = readLine(input);
			while(!line.contains("</Project>")) {
				line = readLine(input);
				if(line.contains("<Part>") && line.contains("</Part>")) {
					String stat = Main.statusLabel.getText();
					stat = stat.substring(0, 6)
							+ line.substring(line.indexOf('>') + 1, line.indexOf('<') - 1)
							+ stat.substring(stat.indexOf("; Test: "));
					Main.statusLabel.setText(stat);
				}
				else if(line.contains("<Test>") && line.contains("</Test>")) {
					String stat = Main.statusLabel.getText();
					stat = stat.substring(0, stat.indexOf("Test:") + 6)
							+ line.substring(line.indexOf('>') + 1, line.indexOf('<') - 1);
					Main.statusLabel.setText(stat);
				}
				else if(line.contains("<Steps>")) {
					line = readLine(input);
					while(!line.contains("</Steps>")) {
						if(line.contains("<Step>")) {
							ProgramStepPanel step = new ProgramStepPanel(Main.programSteps.size());
							ArrayList<String> lines = new ArrayList<String>();
							line = readLine(input);
							while(!line.contains("</Step>")) {
								lines.add(line.substring(line.indexOf('>') + 1, line.indexOf('<') - 1));
								line = readLine(input);
							}
							switch(lines.get(0)) {
								case "Close Relays":
									step.setType("Close Relays");
									lines.remove(0);
									step.add(new CloseRelaysPanel(lines));
									break;
								case "Open Relays":
									step.setType("Open Relays");
									lines.remove(0);
									step.add(new OpenRelaysPanel(lines));
									break;
								case "Set Voltage":
									step.setType("Set Voltage");
									lines.remove(0);
//									step.add(new SetVoltagePanel(lines));
									break;
								case "Set Current":
									step.setType("Set Current");
									lines.remove(0);
//									step.add(new SetCurrentPanel(lines));
									break;
								case "Wait":
									step.setType("Wait");
									lines.remove(0);
									step.add(new WaitPanel(lines));
									break;
								case "Measure Voltage":
									step.setType("Measure Voltage");
									lines.remove(0);
									step.add(new MeasureVoltagePanel(lines));
									break;
								case "Measure Current":
									step.setType("Measure Current");
									lines.remove(0);
									step.add(new MeasureCurrentPanel(lines));
									break;
								case "Math":
									step.setType("Math");
									lines.remove(0);
									step.add(new MathPanel(lines));
									break;
								case "Datalog":
									step.setType("Datalog");
									lines.remove(0);
									step.add(new DatalogPanel(lines));
									break;
								case "Turn Off Resources":
									step.setType("Turn Off Resources");
									lines.remove(0);
									step.add(new TurnOffResourcesPanel(lines));
									break;
								default:
									break;
							}
						}
					}
				}
			}
		} catch (FileNotFoundException e) {
			JOptionPane.showMessageDialog(getParent(), "Error opening file!  File location is invalid.", "File Open Error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		}
	}
	
	private String readLine(FileReader input)
	{
		String line = null;
		try {
			int c = input.read();
			while((c != '\n') && (c != -1))
				line += (char) c;
			} catch (IOException e) {
				//e.printStackTrace();
			}
		return line;
	}
}
